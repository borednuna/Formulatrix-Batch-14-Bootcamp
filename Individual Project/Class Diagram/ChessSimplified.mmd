classDiagram
direction RL

class ColorType {
    Black
    White
}
<<enumeration>> ColorType

class PieceState {
    Active
    Captured
    Promoted
}
<<enumeration>> PieceState

class GameState {
    Init
    IntendingMove
    MakingMove
    CheckmateBlackWin
    CheckmateWhiteWin
    Stalemate
    Resignation
}
<<enumeration>> GameState

class PieceType {
    King
    Queen
    Rook
    Bishop
    Pawn
}
<<enumeration>> PieceType

class Coordinate {
    +uint X
    +uint Y
}
<<struct>> Coordinate

class IPiece {
    +ResetState()
}
<<interface>> IPiece

class IBoard {
    +GetSquare(Coordinate coordinate) :: Square
    +GetKing(ColorType side) :: Piece
    +ResetBoard() :: void
}
<<interface>> IBoard

class Piece {
    +ColorType Color : readonly
    +PieceState State
    +PieceType Type
    +uint InitialPositionX : readonly
    +uint InitialPositionY : readonly
    +Piece(ColorType side) : void
}

class Square {
    +Coordinate coordinate
    +Piece? piece
    +Square(uint file, uint rank)
}

class Board {
    +Square[][] squares
    +Board()
}

class GameController {
    +string GameId : readonly
    +Board Board
    +GameState State
    +bool _isWhiteTurn
    +Utility utility
    +List<.Square>? CurrentLegalMoves
    +GameController(Player whiteSide, Player blackSide)
    +InitGame() :: void
    +NextTurn() :: void
    +IntendMove(string sourceSquare) :: void
    +GetLegalMove(Piece piece) :: List<.Square>
    +CancelMove() :: void
    +MakeMove(string destinationSquare) :: bool
    +Action<.Move, Player>? OnMoveDone
    +HandleMoveDone(Move move, Player player) :: void
    +Action<.Piece>? OnCapturePiece
    +HandleCapturePiece(Piece capturedPiece) :: void
    +Action<.Piece>? OnCastling
    +HandleCastling(Piece rook) :: void
    +Action<.Piece>? OnEnPassant
    +HandleEnPassant(Piece capturedPawn) :: void
    +Action<.Piece>? OnCheckmate
    +HandleEndgame() :: void
    +Action<.Piece>? OnPawnPromotion
    +HandlePawnPromotion(Pawn pawn)
    +Action<.Player>? OnResign
    +HandleResign(Player resignedPlayer)
}

GameController <|-- Board
GameState --* GameController
Board --|> IBoard
ColorType --o Piece
ColorType --o GameController
Piece o-- PieceType
PieceState --* Piece
Square o-- Piece
Square --* Board
Player o-- ColorType
Player --* GameController
Piece <|.. IPiece
Square *-- Coordinate