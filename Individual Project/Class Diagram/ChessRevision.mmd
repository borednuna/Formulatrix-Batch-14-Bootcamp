classDiagram
direction TB

class ColorType {
    Black
    White
}
<<enumeration>> ColorType

class PieceState {
    Active
    Captured
    Promoted
}
<<enumeration>> PieceState

class GameState {
    Init
    IntendingMove
    MakingMove
    CheckmateBlackWin
    CheckmateWhiteWin
    Stalemate
    Resignation
}
<<enumeration>> GameState

class Point {
    +int X
    +int Y
}
<<struct>> Point

class IBoard {
    +GetSquare(Point coordinate) :: Square
    +GetKing(ColorType side) :: Piece
    +Traverse(List<.Point> directions, bool isMovementRepeat) :: List<.Square> traverseResult
    +ResetBoard() :: void
}
<<interface>> IBoard

class IPiece {
    +GetMovementBehavior(out List<.Point> directions, out bool isMovementRepeat)
}
<<interface>> IPiece

class ISpecialPieceMovement {
    +GetSpecialMovement(out Point direction)
}
<<interface>> ISpecialPieceMovement

class GameController {
    +DateTime dateTime
    +List<.ColorType> players
    +Board Board
    +List<.Piece> pieces
    +GameState State
    +bool _isWhiteTurn
    +Utility utility
    +List<.Square>? CurrentLegalMoves
    +GameController(Player whiteSide, Player blackSide)
    +InitGame() :: void
    +NextTurn() :: void
    +IntendMove(Square sourceSquare) :: void
    +GetLegalMove(Square sourceSquare) :: List<.Square>
    +CancelMove() :: void
    +MakeMove(Square destinationSquare) :: bool
    +Action<.Move, Player>? OnMoveDone
    +HandleMoveDone(Move move, Player player) :: void
    +Action<.Piece>? OnCapturePiece
    +HandleCapturePiece(Piece capturedPiece) :: void
    +Action<.Piece>? OnCastling
    +HandleCastling(Piece rook) :: void
    +Action<.Piece>? OnEnPassant
    +HandleEnPassant(Piece capturedPawn) :: void
    +Action<.Piece>? OnCheckmate
    +HandleEndgame() :: void
    +Action<.Piece>? OnPawnPromotion
    +HandlePawnPromotion(Pawn pawn)
    +Action<.Player>? OnResign
    +HandleResign(Player resignedPlayer)
}

class Board {
    +Square[][] squares
    +Board()
}

class Square {
    +Point coordinate
    +Piece? piece
    +Square(uint file, uint rank)
}

class Piece {
    +ColorType Color : readonly
    +PieceState State
    +PieceType Type
    +List<.Point> Directions
    +bool isMovementRepeat
    +bool hasSpecialMove
    +uint InitialPositionX : readonly
    +uint InitialPositionY : readonly
    +Piece(ColorType side) : void
}

class King {
    +List<.Point> castlingCoordinates
}

class Pawn {
    +Point enPassantDirection
    +bool isPromoted
    +bool promotePawn() :: void
}

class Queen
class Knight
class Rook
class Bishop

Board *-- Square
GameController *-- Piece
GameController *-- Board
GameController o-- GameState
IBoard <|-- Board
IPiece <|.. Piece
ISpecialPieceMovement <|.. Pawn
ISpecialPieceMovement <|.. King
Piece o-- PieceState
Piece o-- ColorType
Piece o-- Point
Piece <|-- King
Piece <|-- Pawn
Piece <|-- Queen
Piece <|-- Rook
Piece <|-- Bishop
Piece <|-- Knight
Square o-- Point
Square -- Piece
Square o-- Point
